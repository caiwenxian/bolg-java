<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context" xmlns="http://www.springframework.org/schema/beans"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd">
    <import resource="classpath*:spring-mybatis.xml"/>
    <import resource="classpath*:application-activemq.xml"/>
<!--    <import resource="spring-rabbitmq.xml"/>-->
    <!-- <import resource="classpath:spring/lifedf-component.xml"/> -->
    <!-- <aop:aspectj-autoproxy /> -->
    <!--通知spring使用cglib而不是jdk的来生成代理方法,使AOP可以拦截到Controller层 <context:component-scan 
        base-package="com.*" /> -->
    <!--<aop:aspectj-autoproxy proxy-target-class="true" />-->

    <!-- 引入属性文件 -->
    <context:property-placeholder location="classpath*:*onfig.properties"/>

    <!-- 自动扫描(自动注入) -->
    <context:component-scan base-package="service.*"/>
    <context:component-scan base-package="dao.*"/>
    <context:component-scan base-package="utils.*"/>


    <!--<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" order="1"/>

    &lt;!&ndash; 配置事务管理器&ndash;&gt;
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    &lt;!&ndash; 使用注解事务，需要添加Transactional注解属性 &ndash;&gt;
    <tx:annotation-driven transaction-manager="transactionManager"/>-->

    <!--启用最新的注解器、映射器-->
    <!--<mvc:annotation-driven/>-->


    <!-- 拦截器方式配置事物 -->
    <!--<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Exception,com.lifeshs.common.exception.common.OperationException"/>
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Exception,com.lifeshs.common.exception.common.OperationException"/>
            <tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Exception,com.lifeshs.common.exception.common.OperationException"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception,com.lifeshs.common.exception.common.OperationException"/>
            <tx:method name="modify*" propagation="REQUIRED" rollback-for="java.lang.Exception,com.lifeshs.common.exception.common.OperationException"/>
            <tx:method name="edit*" propagation="REQUIRED" rollback-for="java.lang.Exception,com.lifeshs.common.exception.common.OperationException"/>
            <tx:method name="del*" propagation="REQUIRED" rollback-for="java.lang.Exception,com.lifeshs.common.exception.common.OperationException"/>
            <tx:method name="remove*" propagation="REQUIRED" rollback-for="java.lang.Exception,com.lifeshs.common.exception.common.OperationException"/>
            <tx:method name="repair" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="delAndRepair" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="register*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="move" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="confirm*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="get*" read-only="true" propagation="SUPPORTS"/>
            <tx:method name="find*" read-only="true" propagation="SUPPORTS"/>
            <tx:method name="load*" read-only="true" propagation="SUPPORTS"/>
            <tx:method name="search*" read-only="true" propagation="SUPPORTS"/>
            <tx:method name="list*" read-only="true" propagation="SUPPORTS"/>
            <tx:method name="datagrid*" propagation="SUPPORTS"/>

        </tx:attributes>
    </tx:advice>-->

    <!--<aop:config>
        <aop:pointcut id="serviceTransactionPointcut" expression="execution(* service*..*(..))"/>
        <aop:advisor advice-ref="transactionAdvice" pointcut-ref="serviceTransactionPointcut" order="0"/>
    </aop:config>-->


    <!-- 配置druid监控spring jdbc -->
    <!-- <bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
     </bean>

     <bean id="ehcache" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
         <property name="configLocation" value="classpath:spring-ehcache.xml"/>
     </bean>

     <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
         <property name="cacheManager" ref="ehcache"/>
     </bean>

     &lt;!&ndash; 启用缓存注解开关 &ndash;&gt;
     <cache:annotation-driven cache-manager="cacheManager"/>-->

    <import resource="rabbitMQ-config.xml"/>
    <!--创建消息队列模板-->
    <rabbit:template id="rabbitTemplate" connection-factory="connectionFactory"
                     exchange="spittle.fanout" message-converter="jsonMessageConverter">
    </rabbit:template>
    <bean id="jsonMessageConverter" class="org.springframework.amqp.support.converter.JsonMessageConverter"></bean>

</beans>